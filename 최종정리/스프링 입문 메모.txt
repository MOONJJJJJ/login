단축키 확인 : Ctrl + Alt + Shift + T

컨트롤러에서 리턴 값으로 문자를 반환하면 뷰 리졸버( viewResolver )가 화면을 찾아서 처리한다.
뷰파일 : resources:templates/뷰네임.html 로 생성

MVC: Model, View, Controller

Controller가 Model값처리후 View반환
View에서 또 다른동작일어나면 해당 Controller가 해당 뷰의 Model값처리후 View반환
...무한반복

@ResponseBody 를 사용하면 뷰 리졸버( viewResolver )를 사용하지 않음
대신에 HTTP의 BODY에 문자 내용을 직접 반환(HTML BODY TAG를 말하는 것이 아님)

웹 애플리케이션 구조
컨트롤러: 웹 MVC의 컨트롤러 역할
서비스: 핵심 비즈니스 로직 구현
리포지토리: 데이터베이스에 접근, 도메인 객체를 DB에 저장하고 관리
도메인: 비즈니스 도메인 객체, 예) 회원, 주문, 쿠폰 등등 주로 데이터베이스에 저장하고 관리됨

테스트시
@BeforeEach, @AfterEach : 각 테스트가 시작/종료될 때마다 이 기능을 실행

의존성 주입(DI)
public class MemberService {
 private final MemberRepository memberRepository;
 public MemberService(MemberRepository memberRepository) {
 	this.memberRepository = memberRepository;
 }...

@Autowired
생성자에 @Autowired 가 있으면 스프링이 연관된 객체를 스프링 컨테이너에서 찾아서 넣어준다
객체 생성 시점에 스프링 컨테이너에서 해당 스프링 빈을 찾아서 주입한다. 
생성자가 1개만 있으면 @Autowired 는 생략할 수 있다

@Controller 가 있으면 스프링 빈에 자동 등록됨

스프링 빈을 등록하는 2가지 방법
컴포넌트 스캔과 자동 의존관계 설정
자바 코드로 직접 스프링 빈 등록하기 - 서비스와 리포지토리를 @Bean달고 생성함. 컨트롤러가 그정보 가져와서 DI됨, 서비스/리포지도 마찬가지.

컴포넌트 스캔 원리
@Component 애노테이션이 있으면 스프링 빈으로 자동 등록된다.
@Controller 컨트롤러가 스프링 빈으로 자동 등록된 이유도 컴포넌트 스캔 때문이다.
@Component 를 포함하는 다음 애노테이션도 스프링 빈으로 자동 등록된다.
@Controller
@Service
@Repository

싱글톤
스프링은 스프링 컨테이너에 스프링 빈을 등록할 때, 기본으로 싱글톤으로 등록한다(유일하게 하나만 등록해서 공유한다) 
따라서 같은 스프링 빈이면 모두 같은 인스턴스다. 

DB사용
리포지토리에서 DataSource주입받아 사용, 스프링 빈에서 인자로 DataSource넣어 등록
리포지토리 메서드 기본코드 (원시버전) 예시 - 추후 JDBC Template으로 간단화
각 메서드안에서 sql구문을 커넥션으로 날림, 연결 시 예외 잡기, 클로즈 해줌
여는 메서드(getConnection), 닫는 메서드(close)
각 메서드{
String sql = "insert into member(name) values(?)";
 Connection conn = null;
 PreparedStatement pstmt = null;
 ResultSet rs = null;

try {
 conn = getConnection();
 pstmt = conn.prepareStatement(sql, Statement.RETURN_GENERATED_KEYS);
 pstmt.setString(1, member.getName());
 pstmt.executeUpdate();
 rs = pstmt.getGeneratedKeys();
 if (rs.next()) {
 	member.setId(rs.getLong(1));
 } else {
 	throw new SQLException("id 조회 실패");
 }
 return member;
 } catch (Exception e) {
 	throw new IllegalStateException(e);
 } finally {
 	close(conn, pstmt, rs);
 }
}

private Connection getConnection() {
 return DataSourceUtils.getConnection(dataSource);
 }
 private void close(Connection conn, PreparedStatement pstmt, ResultSet rs) {
 try {
 if (rs != null) {
 rs.close();
 }
 } catch (SQLException e) {
 e.printStackTrace();
 }
 try {
 if (pstmt != null) {
 pstmt.close();
 }
 } catch (SQLException e) {
 e.printStackTrace();
 }
 try {
 if (conn != null) {
 close(conn);
 }
 } catch (SQLException e) {
 e.printStackTrace();
 }
 }
 private void close(Connection conn) throws SQLException {
 DataSourceUtils.releaseConnection(conn, dataSource);
 }


개방-폐쇄 원칙(OCP, Open-Closed Principle)
확장에는 열려있고, 수정, 변경에는 닫혀있다.

스프링의 DI (Dependencies Injection)을 사용하면 기존 코드를 전혀 손대지 않고, 설정만으로 구현 클래스를 변경할 수 있다.

@SpringBootTest : 스프링 컨테이너와 테스트를 함께 실행한다.
@Transactional : 테스트 케이스에 이 애노테이션이 있으면, 테스트 시작 전에 트랜잭션을 시작하고, 테스트
완료 후에 항상 롤백한다. 이렇게 하면 DB에 데이터가 남지 않으므로 다음 테스트에 영향을 주지 않는다.

스프링 JdbcTemplate
순수 Jdbc와 동일한 환경설정을 하면 된다.
스프링 JdbcTemplate과 MyBatis 같은 라이브러리는 JDBC API에서 본 반복 코드를 대부분 제거해준다. 
하지만 SQL은 직접 작성해야 한다
스프링빈에선 리포지토리안에 return new JdbcTemplateMemberRepository(dataSource);

리포지토리 JdbcTemplate 예시코드 (DB관련 구문만 부분부분 떼왔음)
private final JdbcTemplate jdbcTemplate;
public JdbcTemplateMemberRepository(DataSource dataSource) {
 jdbcTemplate = new JdbcTemplate(dataSource);
}

각 메서드{
생성코드
SimpleJdbcInsert jdbcInsert = new SimpleJdbcInsert(jdbcTemplate);		//DB에 값 생성 선언
jdbcInsert.withTableName("member").usingGeneratedKeyColumns("id");	//키생성
Number key = jdbcInsert.executeAndReturnKey(new MapSqlParameterSource(parameters));	//키반환

조회코드(쿼리날리기 코드)
변수 = jdbcTemplate.query("select * from member where id = ?", memberRowMapper(), id);
memberRowMapper() : 결과값을 도메인데이터 구조에 맞게 매핑하는 함수 (변하는 부분이라 개발자가 작성필요)

JPA : (핵심기능)JPA 엔티티 매핑 - 도메인데이터와 매핑해줘서 sql 안해도댐.
JPA는 기존의 반복 코드는 물론이고, 기본적인 SQL도 JPA가 직접 만들어서 실행해준다.
JPA를 사용하면, SQL과 데이터 중심의 설계에서 객체 중심의 설계로 패러다임을 전환을 할 수 있다.
JPA를 사용하면 개발 생산성을 크게 높일 수 있다.
JPA를 통한 모든 데이터 변경은 트랜잭션 안에서 실행해야 한다 , 서비스 계층에 트랜잭션 추가 @Transactional
스프링빈 설정 : 객체관리자 선언, SpringConfig에서 데이터소스,객체관리자 주입, 리포지토리에선 객체관리자만 주입함
{private final EntityManager em;
 public SpringConfig(DataSource dataSource, EntityManager em) {
 this.dataSource = dataSource;
 this.em = em;
 }
리포지토리 생성자 안에 return new JpaMemberRepository(em);
}

도메인 선언시 @Entity
키값변수 선언시 @Id @GeneratedValue(strategy = GenerationType.IDENTITY)

리포지토리 - EntityManager 주입받은후 em.메서드로 구현
private final EntityManager em;
public JpaMemberRepository(EntityManager em) {
 this.em = em;
}
각 메서드{
생성코드 em.persist(member);
조회코드 em.find(Member.class, id);
쿼리쓰는 예시 - 아래에서 ".어쩌구"가 반환타입과 맞아야함
return em.createQuery("select m from Member m", Member.class)
 	.getResultList();

변수 = em.createQuery("select m from Member m where m.name = :name", Member.class)
	.setParameter("name", name)
	.getResultList();
}

스프링데이터 JPA
리포지토리에 구현 클래스 없이 인터페이스 만으로 개발 가능
기본 CRUD 기능 제공함
실무에선 필수사용
스프링 데이터 jpa가 메서드의 이름을 분석해서 알아서 쿼리를 날려준다(?)

주요 메서드
-save(S) : 새로운 엔티티는 저장하고, 있는 엔티티는 병합
-delete(T) : 엔티티 하나를 삭제. 내부에서 EntitiManager.remove() 호출
-findById(Id) : 엔티티 하나를 조회, 내부에서 EntitiManager.find() 호출
-getOne(Id) : 엔티티를 프록시로 조회. EntitiManager.getReference() 호출
-findAll(..) : 모든 엔티티 조회. 정렬이나 페이징 조건 제공 가능.

사용
public interface MemberRepository extends JpaRepository<Member, Long> {}


AOP는 넘김 필요하면 나중에정리